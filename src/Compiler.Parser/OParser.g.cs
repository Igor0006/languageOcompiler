// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.2.1.0
// Machine:  DESKTOP-2Q0E6TS
// DateTime: 29.09.2025 13:36:37
// Input file <OParser.y - 25.09.2025 22:10:58>

// options: lines diagnose & report listing

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using StarodubOleg.GPPG.Runtime;
using Compiler.Ast;

namespace Compiler.Parser
{
public enum Tokens {error=2,EOF=3,KW_VAR=4,IDENT=5,COLON=6,
    INT_LITERAL=7};

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.2.1.0")]
public class Parser: ShiftReduceParser<Compiler.Parser.SemVal, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[3];
  private static State[] states = new State[8];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{4,3},new int[]{-1,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{5,4});
    states[4] = new State(new int[]{6,5});
    states[5] = new State(new int[]{7,6});
    states[6] = new State(new int[]{3,7});
    states[7] = new State(-2);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{4,5,6,7,3});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> KW_VAR, IDENT, COLON, INT_LITERAL, EOF
#line 15 "OParser.y"
        {
            var name = ValueStack[ValueStack.Depth-4].Id ?? throw new InvalidOperationException("Identifier missing");
            var value = ValueStack[ValueStack.Depth-2].IntVal ?? throw new InvalidOperationException("Integer literal missing");
            Result = new ProgramNode(new VarDecl(name, value));
        }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 23 "OParser.y"

public Parser(Scanner scanner) : base(scanner) { }

public Parser() : base(null) { }

#nullable enable
public ProgramNode? Result { get; private set; }
#nullable restore
#line default
}
}
